generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String       @id @default(uuid())
  email       String       @unique
  name        String
  password    String
  address     String
  phoneNumber String
  role        UserType     @default(PERSONEL)
  gender      Gender
  Personel    Personnel[]
  Management  Management[]
  Customer    Customer[]
  Admin       Admin[]

  @@index([email, id, phoneNumber])
}

enum UserType {
  ADMIN
  MANAGEMENT
  CUSTOMER
  PERSONEL
  SUPER_ADMIN
}

enum Permission {
  YES
  NO
}

model PointOfConsumption {
  pocId          String      @id @default(uuid())
  personel       Personnel?  @relation(fields: [personelId], references: [personelId])
  management     Management? @relation(fields: [managementId], references: [managementId])
  admin          Admin?      @relation(fields: [adminAdminId], references: [adminId])
  address        String
  name           String
  phoneNumber    String
  email          String
  productType    ProductType
  createdAt      DateTime    @default(now()) @db.Timestamptz()
  updatedAt      DateTime    @default(now()) @updatedAt
  personelId     String
  managementId   String
  stockLimit     Int
  stockAvailable Int
  Customer       Customer[]
  adminAdminId   String?

  @@index([pocId, name])
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

model Personnel {
  personelId          String               @id @default(uuid())
  user                User                 @relation(fields: [userId], references: [id])
  createdAt           DateTime             @default(now()) @db.Timestamptz()
  personelPerformance Performance[]
  poc                 PointOfConsumption[]
  userId              String

  @@index([personelId])
  @@map("Personnel")
}

enum ProductType {
  PETROL
  DISEL
}

model Management {
  managementId          String               @id @default(uuid())
  user                  User                 @relation(fields: [userId], references: [id])
  createdAt             DateTime             @default(now()) @db.Timestamptz()
  managementPerformance Performance[]
  poc                   PointOfConsumption[]
  userId                String

  @@index([managementId])
}

model Admin {
  adminId         String               @id @default(uuid())
  createdAt       DateTime             @default(now()) @db.Timestamptz()
  VoucherDispense VoucherDispense[]
  user            User                 @relation(fields: [userId], references: [id])
  userId          String
  poc             PointOfConsumption[]

  @@index([adminId])
}

model Voucher {
  voucherId       String            @id @default(uuid())
  voucherCode     String            @unique
  createdAt       DateTime          @default(now()) @db.Timestamptz()
  collected       Boolean
  VoucherDispense VoucherDispense[]
  productType     ProductType
  customer        Customer          @relation(fields: [customerId], references: [customerId])
  customerId      String

  @@index([voucherId])
}

model Customer {
  customerId  String             @id @default(uuid())
  name        String
  email       String
  phoneNumber String
  createdAt   DateTime           @default(now()) @db.Timestamptz()
  updatedAt   DateTime           @default(now()) @updatedAt
  product     ProductType
  poc         PointOfConsumption @relation(fields: [pocId], references: [pocId])
  pocId       String
  thirdParty  Boolean
  createdBy   User               @relation(fields: [userId], references: [id])
  userId      String
  Voucher     Voucher[]

  @@index([customerId, email, phoneNumber])
}

model VoucherDispense {
  Id              String   @id @default(uuid())
  voucher         Voucher  @relation(fields: [voucherId], references: [voucherId])
  createdAt       DateTime @default(now()) @db.Timestamptz()
  approvedByAdmin Admin    @relation(fields: [adminId], references: [adminId])
  adminId         String
  dispenseDate    DateTime @default(now()) @db.Timestamptz()
  vehicle         String
  vehicleNUmber   String
  dateUsed        DateTime @default(now()) @db.Timestamptz()
  voucherId       String

  @@index([Id])
}

model Performance {
  id                     String      @id @default(uuid())
  staff                  Personnel   @relation(fields: [personelId], references: [personelId])
  personelId             String
  createdAt              DateTime    @default(now()) @db.Timestamptz()
  cusomtomersHandled     Int
  productsDispensed      Int
  Management             Management? @relation(fields: [managementManagementId], references: [managementId])
  managementManagementId String?
}

// npx prisma migrate dev --name init
// npx prisma format
