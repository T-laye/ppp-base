generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("PPP_BASE")
}

model User {
  id                String               @id @default(uuid())
  email             String               @unique
  name              String
  password          String
  address           String
  phoneNumber       String
  role              UserType             @default(PERSONNEL)
  gender            Gender
  personnel         Personnel[]          @relation("user")
  createdBy         Personnel[]          @relation("createdBy")
  management        Management[]
  customer          Customer[]
  admin             Admin[]
  Product           Product[]
  createdDate       DateTime             @default(now()) @db.Timestamptz()
  poc               PointOfConsumption[]
  emailVerified     Boolean              @default(false)
  verificationToken String?

  @@index([email, id, phoneNumber])
}

model Personnel {
  id                   String              @id @default(uuid())
  user                 User                @relation(fields: [userId], references: [id], name: "user", onDelete: Cascade)
  createdAt            DateTime            @default(now()) @db.Timestamptz()
  personnelPerformance Performance[]
  poc                  PointOfConsumption?
  userId               String
  createdBy            User?               @relation(fields: [createdById], references: [id], name: "createdBy")
  createdById          String

  @@index([id])
}

enum UserType {
  ADMIN
  MANAGEMENT
  CUSTOMER
  PERSONNEL
  SUPER_ADMIN
}

enum Permission {
  YES
  NO
}

model PointOfConsumption {
  id             String       @id @default(uuid())
  personnel      Personnel?   @relation(fields: [personnelId], references: [id], onDelete: SetNull)
  management     Management[]
  address        String
  name           String
  phoneNumber    String
  email          String       @unique
  createdAt      DateTime     @default(now()) @db.Timestamptz()
  updatedAt      DateTime     @default(now()) @updatedAt
  personnelId    String?      @unique
  managementId   String?
  stockLimit     Int
  stockAvailable Int
  customer       Customer[]
  product        Product[]    @relation(name: "POCProducts")
  user           User         @relation(fields: [createdBy], references: [id])
  createdBy      String

  @@index([id, name])
}

model Product {
  id                String               @id @default(uuid())
  productName       String
  voucherAllocation Int
  unit              String
  createdAt         DateTime             @default(now()) @db.Timestamptz()
  updatedAt         DateTime             @default(now()) @updatedAt
  user              User                 @relation(fields: [createdBy], references: [id])
  voucher           Voucher[]
  poc               PointOfConsumption[] @relation(name: "POCProducts")
  pocId             String?
  createdBy         String

  @@index([productName, id])
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

model Management {
  id                    String               @id @default(uuid())
  user                  User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt             DateTime             @default(now()) @db.Timestamptz()
  managementPerformance Performance[]
  poc                   PointOfConsumption[]
  userId                String
  canEdit               Boolean              @default(false)

  @@index([id])
}

model Admin {
  id              String            @id @default(uuid())
  createdAt       DateTime          @default(now()) @db.Timestamptz()
  VoucherDispense VoucherDispense[]
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String

  @@index([id])
}

model Customer {
  id                String               @id @default(uuid())
  name              String
  email             String               @unique
  phoneNumber       String
  address           String
  createdAt         DateTime             @default(now()) @db.Timestamptz()
  updatedAt         DateTime             @default(now()) @updatedAt
  poc               PointOfConsumption[]
  user              User                 @relation(fields: [createdBy], references: [id])
  createdBy         String
  voucher           Voucher[]
  emailVerified     Boolean              @default(false)
  verificationToken String?
  acceptTerms       Boolean              @default(false)
  role              UserType             @default(CUSTOMER)

  @@index([id, email, phoneNumber])
}

model Voucher {
  voucherId       String            @id @default(uuid())
  voucherCode     String            @unique
  createdAt       DateTime          @default(now()) @db.Timestamptz()
  collected       Boolean
  voucherDispense VoucherDispense[]
  customer        Customer          @relation(fields: [customerId], references: [id])
  customerId      String
  thirdParty      Boolean
  product         Product           @relation(fields: [productId], references: [id])
  productId       String

  @@index([voucherId])
}

model VoucherDispense {
  Id              String   @id @default(uuid())
  voucher         Voucher  @relation(fields: [voucherId], references: [voucherId])
  createdAt       DateTime @default(now()) @db.Timestamptz()
  approvedByAdmin Admin    @relation(fields: [adminId], references: [id])
  adminId         String
  dispenseDate    DateTime @default(now()) @db.Timestamptz()
  vehicle         String
  vehicleNUmber   String
  dateUsed        DateTime @default(now()) @db.Timestamptz()
  voucherId       String

  @@index([Id])
}

model Performance {
  id                 String      @id @default(uuid())
  staff              Personnel   @relation(fields: [personnelId], references: [id])
  personnelId        String
  createdAt          DateTime    @default(now()) @db.Timestamptz()
  cusomtomersHandled Int
  productsDispensed  Int
  management         Management? @relation(fields: [managementId], references: [id])
  managementId       String?
}

// npx prisma migrate dev --name init
// npx prisma format
