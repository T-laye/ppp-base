generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("PPP_BASE")
}

model User {
  id          String       @id @default(uuid())
  email       String       @unique
  name        String
  password    String
  address     String
  phoneNumber String
  role        UserType     @default(PERSONNEL)
  gender      Gender
  personnel   Personnel[]  @relation("user")
  createdBy   Personnel[]  @relation("createdBy")
  Management  Management[]
  Customer    Customer[]
  Admin       Admin[]
  Product     Product[]

  @@index([email, id, phoneNumber])
}

model Personnel {
  personnelId          String               @id @default(uuid())
  user                 User                 @relation(fields: [userId], references: [id], name: "user")
  createdAt            DateTime             @default(now()) @db.Timestamptz()
  personnelPerformance Performance[]
  poc                  PointOfConsumption[]
  userId               String
  createdBy            User                 @relation(fields: [createdById], references: [id], name: "createdBy")
  createdById          String

  @@index([personnelId])
}

enum UserType {
  ADMIN
  MANAGEMENT
  CUSTOMER
  PERSONNEL
  SUPER_ADMIN
}

enum Permission {
  YES
  NO
}

model PointOfConsumption {
  pocId          String      @id @default(uuid())
  personnel      Personnel?  @relation(fields: [personnelId], references: [personnelId])
  management     Management? @relation(fields: [managementId], references: [managementId])
  admin          Admin?      @relation(fields: [adminId], references: [id])
  address        String
  name           String
  phoneNumber    String
  email          String
  createdAt      DateTime    @default(now()) @db.Timestamptz()
  updatedAt      DateTime    @default(now()) @updatedAt
  personnelId    String
  managementId   String
  stockLimit     Int
  stockAvailable Int
  Customer       Customer[]
  adminId        String
  product        Product     @relation(fields: [productId], references: [id])
  productId      String

  @@index([pocId, name])
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

model Product {
  id                 String               @id @default(uuid())
  productName        String
  voucherAllocation  Int
  unit               String
  createdAt          DateTime             @default(now()) @db.Timestamptz()
  updatedAt          DateTime             @default(now()) @updatedAt
  user               User                 @relation(fields: [createdBy], references: [id])
  Voucher            Voucher[]
  PointOfConsumption PointOfConsumption[]
  createdBy          String

  @@index([productName, id])
}

// enum ProductType {
//   PETROL
//   DISEL
// }

model Management {
  managementId          String               @id @default(uuid())
  user                  User                 @relation(fields: [userId], references: [id])
  createdAt             DateTime             @default(now()) @db.Timestamptz()
  managementPerformance Performance[]
  poc                   PointOfConsumption[]
  userId                String
  canEdit               Boolean              @default(false)

  @@index([managementId])
}

model Admin {
  id              String               @id @default(uuid())
  createdAt       DateTime             @default(now()) @db.Timestamptz()
  VoucherDispense VoucherDispense[]
  user            User                 @relation(fields: [userId], references: [id])
  userId          String
  poc             PointOfConsumption[]

  @@index([id])
}

model Customer {
  customerId  String               @id @default(uuid())
  name        String
  email       String               @unique
  phoneNumber String
  createdAt   DateTime             @default(now()) @db.Timestamptz()
  updatedAt   DateTime             @default(now()) @updatedAt
  poc         PointOfConsumption[]
  user        User                 @relation(fields: [createdBy], references: [id])
  createdBy   String
  Voucher     Voucher[]

  @@index([customerId, email, phoneNumber])
}

model Voucher {
  voucherId       String            @id @default(uuid())
  voucherCode     String            @unique
  createdAt       DateTime          @default(now()) @db.Timestamptz()
  collected       Boolean
  VoucherDispense VoucherDispense[]
  customer        Customer          @relation(fields: [customerId], references: [customerId])
  customerId      String
  thirdParty      Boolean
  product         Product           @relation(fields: [productId], references: [id])
  productId       String

  @@index([voucherId])
}

model VoucherDispense {
  Id              String   @id @default(uuid())
  voucher         Voucher  @relation(fields: [voucherId], references: [voucherId])
  createdAt       DateTime @default(now()) @db.Timestamptz()
  approvedByAdmin Admin    @relation(fields: [adminId], references: [id])
  adminId         String
  dispenseDate    DateTime @default(now()) @db.Timestamptz()
  vehicle         String
  vehicleNUmber   String
  dateUsed        DateTime @default(now()) @db.Timestamptz()
  voucherId       String

  @@index([Id])
}

model Performance {
  id                     String      @id @default(uuid())
  staff                  Personnel   @relation(fields: [personnelId], references: [personnelId])
  personnelId            String
  createdAt              DateTime    @default(now()) @db.Timestamptz()
  cusomtomersHandled     Int
  productsDispensed      Int
  Management             Management? @relation(fields: [managementManagementId], references: [managementId])
  managementManagementId String?
}

// npx prisma migrate dev --name init
// npx prisma format
