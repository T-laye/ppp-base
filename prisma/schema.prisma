generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String       @id @default(uuid())
  email       String       @unique
  name        String
  password    String
  address     String
  phoneNumber String
  gender      Gender
  Personel    Personel[]
  Management  Management[]

  @@index([email, id])
}

enum UserType {
  ADMIN
  MANAGEMENT
  CUSTOMER
  PERSONEL
  SUPER_ADMIN
}

enum Permission {
  YES
  NO
}

model PointOfConsumption {
  pocId          String      @id @default(uuid())
  personel       Personel    @relation(fields: [personelId], references: [personelId])
  management     Management  @relation(fields: [managementId], references: [managementId])
  address        String
  name           String
  phoneNumber    String
  email          String
  productType    ProductType
  createdAt      DateTime    @default(now()) @db.Timestamptz()
  updatedAt      DateTime    @default(now()) @updatedAt
  personelId     String
  managementId   String
  stockLimit     Int
  stockAvailable Int

  @@index([pocId, name])
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

model Personel {
  personelId          String               @id @default(uuid())
  user                User                 @relation(fields: [userId], references: [id])
  createdAt           DateTime             @default(now()) @db.Timestamptz()
  personelPerformance Performance[]
  poc                 PointOfConsumption[]
  userId              String

  @@index([personelId])
}

enum ProductType {
  PETROL
  DISEL
}

model Management {
  managementId          String               @id @default(uuid())
  user                  User                 @relation(fields: [userId], references: [id])
  createdAt             DateTime             @default(now()) @db.Timestamptz()
  managementPerformance Performance[]
  poc                   PointOfConsumption[]
  userId                String

  @@index([managementId])
}

model Admin {
  adminId         String            @id @default(uuid())
  fullName        String
  password        String
  phoneNUmber     String            @unique
  email           String            @unique
  contactAddress  String
  designation     String
  createdAt       DateTime          @default(now()) @db.Timestamptz()
  VoucherDispense VoucherDispense[]
}

model Voucher {
  voucherId       String            @id @default(uuid())
  voucherCode     String            @unique
  customerName    String
  customerEmail   String
  customerPhone   String
  thirdParty      Boolean
  createdAt       DateTime          @default(now()) @db.Timestamptz()
  collected       Boolean
  VoucherDispense VoucherDispense[]
  productType     ProductType
}

model VoucherDispense {
  Id              String      @id @default(uuid())
  voucher         Voucher     @relation(fields: [voucherId], references: [voucherId])
  createdAt       DateTime    @default(now()) @db.Timestamptz()
  approvedByAdmin Admin       @relation(fields: [adminId], references: [adminId])
  adminId         String
  dispenseDate    DateTime    @default(now()) @db.Timestamptz()
  vehicle         String
  vehicleNUmber   String
  dateUsed        DateTime    @default(now()) @db.Timestamptz()
  voucherId       String
}

model Performance {
  id                     String      @id @default(uuid())
  staff                  Personel    @relation(fields: [personelId], references: [personelId])
  personelId             String
  createdAt              DateTime    @default(now()) @db.Timestamptz()
  cusomtomersHandled     Int
  productsDispensed      Int
  Management             Management? @relation(fields: [managementManagementId], references: [managementId])
  managementManagementId String?
}

// npx prisma migrate dev --name init
// npx prisma format
